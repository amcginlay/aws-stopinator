AWSTemplateFormatVersion: '2010-09-09'
Description: https://ven-eco-admin.s3.amazonaws.com/cfn/stopinator/stopinator.yaml
# aws cloudformation create-stack --stack-name stopinator --template-body file://<PATH_TO>/stopinator.yaml --capabilities CAPABILITY_IAM

Resources:

  StopinatorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StopinatorInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                  - ec2:CreateTags
                Resource: '*'

  StopinatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt StopinatorExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          from datetime import datetime

          def lambda_handler(event, context):
            ec2 = boto3.client('ec2')
            all_instances = ec2.describe_instances()
            preserved_instance_ids = []
            for reservation in all_instances['Reservations']:
              for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                for tag in instance['Tags']:
                  if str(tag['Key']).lower() == 'stopinator:always-on' and str(tag['Value']).lower() == 'true':
                    preserved_instance_ids.append(instance_id)

            for reservation in all_instances['Reservations']:
              for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                if instance_id not in preserved_instance_ids:
                  print(f"Will stop {instance_id}")
                  timestamp = datetime.utcnow().isoformat()

                  try:
                    print(f"Tagging {instance_id}")
                    ec2.create_tags(Resources=[instance_id], Tags=[{'Key': 'stopinator:last-stopped-at', 'Value': timestamp}])
                  except Exception as e:
                    print(f"Error tagging instance {instance_id}: {str(e)}")

                  try:
                    print(f"Stopping {instance_id}")
                    timestamp = datetime.utcnow().isoformat()
                    ec2.stop_instances(InstanceIds=[instance_id])
                  except Exception as e:
                    print(f"Error stopping instance {instance_id}: {str(e)}")

      Runtime: python3.10
      Timeout: 60

  StopinatorSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Invoke Stopinator at 6am daily"
      ScheduleExpression: "cron(0 6 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt StopinatorFunction.Arn
          Id: "Stopinator"

  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StopinatorFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopinatorSchedule.Arn
